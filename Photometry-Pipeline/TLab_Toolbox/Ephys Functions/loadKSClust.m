function [clusters] = loadKSClust(phyPath,varargin)
%loadKSClut - Load KiloSort Clusters
%   
%   Usage:
%       clusters = loadKSClust(phyPath);
%
%   Description: This function is designed to import data from silicone
%   probe recordings after it's been sorted using KiloSort and manually
%   curated using Phy. The program relies on the npy files and delimited
%   files outputted by phy. The function isolates clusters and stores
%   information, such as spike times, cluster id, template id, max channel,
%   coordinates, shanks
%
%   Input:
%       phyPath - A string containing the path to the phy folder
%
%   Output:
%       clusters - A structure containing information about isolated spikes
%   that were deemed 'good'
%
%Author: Pratik Mistry, 2020

if nargin > 1
    Fs = varargin{1};
else
    Fs = 30000;
end

%Load NPY Data Files
allST = readNPY(fullfile(phyPath,'spike_times.npy')); % Load all spike times
allST = double(allST)./Fs;
allTemplates = readNPY(fullfile(phyPath,'spike_templates.npy')); %Load the templates for each spike time
tempMat = readNPY(fullfile(phyPath,'templates.npy')); %Load the matrix of template
winv = readNPY(fullfile(phyPath,'whitening_mat_inv.npy')); %Load the inverse whitening matrix
stClusts = readNPY(fullfile(phyPath,'spike_clusters.npy')); %Load the cluster id for each spike time

chanMap = readNPY(fullfile(phyPath,'channel_map.npy')); %load channel numbers
if chanMap(1) == 0; chanMap = chanMap + 1; end %if chanMap is 0-idx, make 1-idx
chanPos = readNPY(fullfile(phyPath,'channel_positions.npy')); %load xcoords, ycoords
if exist(fullfile(phyPath,'channel_shanks.npy'),'file')
    kcoords = readNPY(fullfile(phyPath,'channel_shanks.npy')); %load kcoords
else
    fprintf('Could not load kcoords\n');
end

goodCluID = getGoodClusters(phyPath); %Call a function to pull cluster ids that were labeled good
nGClu = length(goodCluID); %Pull the number of good clusters

clusters(nGClu) = struct('spikeTimes',[],'clusterID',[],'templateID',[],'maxChannel',[],...
    'coordinates',[],'shank',[]); %Create the cluster structure before storing data inside

tempMatInv = zeros(size(tempMat)); %Pre-allocate space for the template matrix corrected using the inverse whitening matrix
for n = 1:size(tempMat,1)
    tempMatInv(n,:,:) = squeeze(tempMat(n,:,:)) * winv;
end

%The following for-loop goes through the good cluster id and organizes data
%into the structure
for n = 1:nGClu
    tmpInd = find(stClusts == goodCluID(n)); %Use find the get the indices that belong to a specific cluster id
    clusters(n).spikeTimes = allST(tmpInd); %Pull all the spike times associated with that cluster
    clusters(n).clusterID = goodCluID(n); % Store the cluster id
    templateID = 1+mode(unique(allTemplates(tmpInd))); % Find the template id for the cluster; this will be used to find the max channel information.
    clusters(n).templateID = templateID; % Store the template id
    stTemp = range(squeeze(tempMatInv(templateID,:,:)),1); % Create a 1 x nChannel matrix containing the max val for each channel
    maxVal = max(stTemp); % Find the max value
    maxInd = find(stTemp == maxVal); % Find the index of the max val
    maxChan = chanMap(maxInd); % Using the previous found index, find the max channel info
    clusters(n).maxChannel = maxChan; % Store max channel info
    clusters(n).coordinates = [chanPos(maxInd,1) chanPos(maxInd,2)]; % Store max channel coordinates
    if exist('kcoords','var') 
        clusters(n).shank = kcoords(maxInd); %Store max channel shank number
    end
end

end

function goodCluID = getGoodClusters(phyPath)
%getGoodClusters - Pull good cluster ids for an experiment
%   
%   goodCluID = getGoodClusters(phyPath);
%
%   Description: This function pulls the all the cluster ids of clusters
%   deemed 'good' during manual curation using phy. It pulls this
%   information using the cluster_group file generated by phy
%
%   Input:
%   - phyPath - A string containing the path to the phy folder
%
%   Output:
%   - goodCluID - A vector of good cluster ids
%
%Author: Pratik Mistry, 2020

% The following if statement checks to see if the cluster_group file is a
% tsv or csv file and stores the path into a string named cgf

if exist(fullfile(phyPath,'cluster_group.csv'),'file')
    cgf = fullfile(phyPath,'cluster_group.csv'); 
elseif exist(fullfile(phyPath,'cluster_group.tsv'),'file')
    cgf = fullfile(phyPath,'cluster_group.tsv'); 
else
    disp('Error: No Group File Found');
    goodCluID = 0;
    return;
end
fid = fopen(cgf); %Create a file identifier for the csv or tsv file
clustGroup = textscan(fid,'%s%s'); % Pull the data from the data into two columns (cluster id and cluster label)
fclose(fid); % Close the file
clusterID = cellfun(@str2num,clustGroup{1}(2:end),'uni',false); % Turn the cluster ids in the cell from strings to numbers
clusterID = cell2mat(clusterID); % Turn the cell of cluster ids into a vector
goodInd = cellfun(@(x)strcmp(x,'good'),clustGroup{2}(2:end)); % Create a logical vector of the good clusters
goodCluID = clusterID.*goodInd; % Multiply all cluster ids with the logical vector
goodCluID(find(goodCluID == 0)) = []; % Remove all clusters that are '0'

end
